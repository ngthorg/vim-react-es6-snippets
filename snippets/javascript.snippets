snippet it
	it("${1}", function() {
		${2}
	});
snippet desc
	describe("${1}", function() {
		${2}
	});
snippet con
	constructor(props) {
		super(props);
		${0}
	}
snippet imp
	import ${1} from ${2};
snippet req
	var ${1} = require('${2}');
snippet exp
	export default ${1}
snippet cls
	export default class ${1:ClassName} extends React.Component {
		constructor(props) {
			super(props);

			this.state = {${2}};
		}
	}
snippet clsex
	class ${1:ClassName} extends React.Component {
		constructor(props) {
			super(props);

			this.state = {${2}};
		}
	}

	export default $1
snippet cdm
	componentDidMount() {
		${1}
	}
snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}
snippet cwm
	componentWillMount() {
		${1}
	}
snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}
snippet cwun
	componentWillUnmount() {
		${1}
	}
snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}
snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}
snippet clnl
	let ${1:classerName} = classNames({
		${2}
	});
snippet clnv
	var ${1:classerName} = classNames({
		${2}
	});
snippet gdp
	getDefaultProps() {
		return {
			${1}
		};
	}
snippet gis
	getInitialState() {
		return {
			${1}
		};
	}
snippet use
	"use strict";
snippet pt
	static propTypes = {
		${1}
	}
snippet ren
	render() {
		return (
			${1}
		);
	}
snippet sst
	this.setState({
		${1}
	});
snippet props
	this.props.${1}
snippet state
	this.state.${1}
snippet dpt
	${1:prop}: React.PropTypes.${2:type}
snippet rptf
	React.PropTypes.func
snippet rpts
	React.PropTypes.string
snippet rptn
	React.PropTypes.number
snippet rpto
	React.PropTypes.object
